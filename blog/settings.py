"""
Generated by "django-admin startproject" using Django 2.1.5.
"""

import os
import dj_database_url
import django_heroku

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don"t run with debug turned on in production!

DEBUG = False
# DEBUG = os.environ.get("DJANGO_DEBUG")
ALLOWED_HOSTS = ["127.0.0.1", "localhost", "0.0.0.0", "www.221bbakerst.site", "221bbakerst.site", "myblog-221bbakerst.herokuapp.com"]
# ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # for blog apps
    "post",
    "album",
    "about",
    "userprofile",
    "comment",

    # for widgets
    "ckeditor", # rich-text editor
    "markdownx", # markdown editor
    "embed_video", # to load video
    "whitenoise.runserver_nostatic", # for heroku
    "storages", # for aws s3 storage
    "gunicorn",

    # for user login
    "django.contrib.sites",
    "allauth",
    "imagekit",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.github",
]
SITE_ID = 1

MIDDLEWARE = [
    # for heroku deployment
    "whitenoise.middleware.WhiteNoiseMiddleware",
    # to receive email notification when there is error
    "django.middleware.common.BrokenLinkEmailsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
        ]

ROOT_URLCONF = "blog.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "blog.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {"default": dj_database_url.config(conn_max_age=600)}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Berlin"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static/")]
STATIC_ROOT = os.path.join(BASE_DIR, "static/staticfiles/")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "static/media/")

# ckeditor config
CKEDITOR_CONFIGS = {
    # django-ckeditor默认使用default配置
    "default": {
        # editor size
        "width":"750px",
        "height":"250px",
        # tab to spaces
        "tabSpaces": 4,
        # toolbar style
        "toolbar": "Custom",
        # toolbar buttons
        "toolbar_Custom": [
            # emoticons and code blocks
            ["Smiley", "CodeSnippet"], 
            # font options
            ["Bold", "Italic", "Underline", "RemoveFormat", "Blockquote"],
            # font color
            ["TextColor", "BGColor"],
            # link
            ["Link", "Unlink"],
            # list
            ["NumberedList", "BulletedList"],
            ["Maximize"]
        ],
        # code block plugins
        "extraPlugins": ",".join(["codesnippet"]),
    }
}

# for login/register

AUTH_USER_MODEL = "userprofile.User"

# log in with either username or email
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
# email is required for registration
ACCOUNT_EMAIL_REQUIRED = True
# email must be unique
ACCOUNT_UNIQUE_EMAIL = True
# enter password twice when registration
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
# email verification
ACCOUNT_EMAIL_VERIFICATION = "optional"
# the expiration date of email confirmation mail
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
# Subject-line prefix to use for email messages sent
ACCOUNT_EMAIL_SUBJECT_PREFIX = "221bbakerst.site"
# the duration seconds of sending the next confirmation email
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60
# login attempt maximum
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
# log in automatically once email confirmed
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
# allow login via sociall account
SOCIALACCOUNT_AUTO_SIGNUP = True
# redirect to page once login
LOGIN_REDIRECT_URL = "/"
# redirect to page once logout
ACCOUNT_LOGOUT_REDIRECT_URL = "/"
# log out once email changed
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False
# logout directly without confirmation
ACCOUNT_LOGOUT_ON_GET = True

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)

# email setting
ADMINS = [("admin", "maplewong04@gmail.com"),]
SEND_BROKEN_LINK_EMAILS = True
MANAGERS = ADMINS
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("DJANGO_EMAIL_HOST")
EMAIL_PORT = os.environ.get("DJANGO_EMAIL_PORT")
EMAIL_HOST_USER = os.environ.get("DJANGO_EMAIL_HOST_USER")
# attention email host password is not eamil login password, but app password if you use gmail
EMAIL_HOST_PASSWORD = os.environ.get("DJANGO_EMAIL_HOST_PASSWORD")
# TLS or SSL protocol
EMAIL_USE_TLS = True
# EMAIL_USE_SSL = False
EMAIL_SUBJECT_PREFIX = os.environ.get("DJANGO_EMAIL_SUBJECT_PREFIX")
DEFAULT_FROM_EMAIL = EMAIL_FROM = EMAIL_HOST_USER

# recaptcha authentication
GOOGLE_RECAPTCHA_SECRET_KEY = os.environ.get("DJANGO_GOOGLE_RECAPTCHA_SECRET_KEY")


# initialise sentry-dk to log
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
sentry_sdk.init(dsn=os.environ['SENTRY_DSN'], integrations=[DjangoIntegration()])

# Capture an explicit error using the captureException method
# from sentry_sdk import capture_exception
# try:
#     a_potentially_failing_function()
# except Exception as e:
#     # Alternatively the argument can be omitted
#     capture_exception(e)

AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
S3_BUCKET = os.environ.get("S3_BUCKET")
AWS_S3_REGION_NAME = os.environ.get("AWS_S3_REGION_NAME")
# if a user upload a file with the same name as another in s3, rename it automatically
AWS_S3_FILE_OVERWRITE = False
# some issue with the default value, so reset it to None
AWS_DEFAULT_ACL = None
# set the storage backend
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

django_heroku.settings(locals())
